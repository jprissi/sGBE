cmake_minimum_required( VERSION 3.10 )

set(GENERATE_OPCODES_SCRIPT ${PROJECT_SOURCE_DIR}/generate_opcodes.py)

# Set the output header file generated by the Python script
set(GENERATED_HEADER_FILE ${CMAKE_CURRENT_BINARY_DIR}/opcodes.h)

# Add a custom command to execute the Python script and generate the header file
add_custom_command(
    OUTPUT ${GENERATED_HEADER_FILE}
    COMMAND ${PYTHON_EXECUTABLE} ${GENERATE_OPCODES_SCRIPT}
    DEPENDS ${GENERATE_OPCODES_SCRIPT}
    COMMENT "Generating opcodes header file"
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

# Add a custom target that depends on the generated header file
# add_custom_target(GenerateOpcodesHeader DEPENDS ${GENERATED_HEADER_FILE})

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

file( GLOB SOURCES *.cpp )

set(CMAKE_CXX_FLAGS "-Wall -Wextra -O3" ) # -pedantic

set( MAIN_SOURCES main.cpp )
set( MAIN_EXE_NAME gbe )

add_executable(gbe main.cpp ${SOURCES} ${GENERATED_HEADER_FILE})

# SDL2 support

find_package(SDL2 REQUIRED)
include_directories(${SDL2_INCLUDE_DIRS})
include_directories(${SDL2_INCLUDE_DIRS})

target_link_libraries(gbe ${SDL2_LIBRARIES})

# Install
install( TARGETS ${MAIN_EXE_NAME} RUNTIME DESTINATION bin )